#include <stdio.h>
#include <stdlib.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <time.h>
#include <ctype.h>
#include <stdbool.h>

int frameCount=0;
int increase_signal_time=10;
int y=0;
int x=0;
int arr[4]={1,2,3,4};  // array for keeping track of strategy
int w=0; // refer to array index
int signal_span_congestion=40;
int signal_span_normal=20;
int cars_count_a, cars_count_b, cars_count_c, cars_count_d=0;
int z=0;
int cam_width=300;
int cam_height=300;
const char *cascade_name="carDetection.xml";
int cars_count=0;
int cars_count_final=0;
int now_count=0;
//timer variables
int milliseconds=0;
int seconds=0;
int minutes=0;
int signal_time_switch=10; // for changing signal switichng time
clock_t startTime, count_time;
//int timeEndPeriod(10);

CvCapture* capture=NULL; // instance of cam capture
IplImage* frame1=NULL;
IplImage* frame2=NULL;
IplImage* frame3=NULL;
IplImage* frame4=NULL;

CvSeq* cars=NULL;
// variablex for frame differencing
IplImage* img1=0;
IplImage* img2=0;
IplImage* img1_gray=0;
IplImage* img2_gray=0;
IplImage* img_diff=0;
IplImage* img_diff2=0;
IplImage *edge_fg=0;

bool time_left=false;
int new_time=0;

int tr=45;
int i,j,k;
int height, width, step, channels;
uchar *data;
int WhiteCount, bWhite;
long double similarity=0;
//long double similarity2=0;
double sum=0;
int total_pixel=0;
int black_pixel=0;
float Black_percentage=0.0;
bool sys_wait=false;

IplImage* img=NULL;
IplImage *result1=NULL;
IplImage *result2=NULL;
IplImage *result3=NULL;
IplImage *result4=NULL;

bool first_pair=false;   // pairing of 1st and 3rd road
bool second_pair=true;   // pairing of 2nd n 4th road
bool signal_1=false;
bool signal_2=false;
bool signal_3=false;
bool signal_4=false;
//bool signal_1,signal_2,signal_3,signal_4=false;
bool signal_turn1=false;   // check for signal'x turn taken by another signal
bool signal_turn2=false;
int lap=1;
int road_value1=0; // check congestion on missd signals
int road_value2=0;
int signal_name=0;
int a,b,c,d=0;  // cars count for all signals

IplImage *greater_1=0; // finding greater number of cars on roads
IplImage *smaller_1=0;

IplImage *greater_2=0; // finding greater number of cars on roads
IplImage *smaller_2=0;


int signal_code=0;
int signal_code2=0;  // siganl name/ code to tell which signal is on
int determine_conegstion_pair1=0;
int determine_conegstion_pair2=0;
//bool signal_1=false;



//bool signal_start=false;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CAR DETECTION + COUNTING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

IplImage *car_detection_counting( IplImage* img )
{

    static CvMemStorage* storage = 0;   // Create memory for calculations
    static CvHaarClassifierCascade* cascade = 0; // Create a new Haar classifier
    int scale = 1;          // Sets the scale with which the rectangle is drawn with
    CvPoint pt1, pt2;      // Create two points to represent the hand locations
    int i; // Looping variable
    cascade = (CvHaarClassifierCascade*)cvLoad( cascade_name, 0, 0, 0 ); // Load the HaarClassifierCascade

    // Check whether the cascade has loaded successfully. Else report and error and quit
    if( !cascade )
    {
        fprintf( stderr, "ERROR: Could not load classifier cascade\n" );
        return;
    }

   storage = cvCreateMemStorage(0);   // Allocate the memory storage
    //cvNamedWindow( "result",1);   // Create a new named window with title: result
    cvClearMemStorage( storage );   // Clear the memory storage which was used before

    // Find whether the cascade is loaded, to find the hands. If yes, then:
    if( cascade )
    {
         // There can be more than one hand in an image. So create a growable sequence of hands.
        // Detect the objects and store them in the sequence
         cars= cvHaarDetectObjects( img, cascade, storage,
                                            1.1, 2, CV_HAAR_DO_CANNY_PRUNING,
                                            cvSize(40, 40) );
        // Loop the number of hands found.
        for( i = 0; i < (cars ? cars->total : 0); i++ )
        {

            CvRect* r = (CvRect*)cvGetSeqElem( cars, i );  // Create a new rectangle for drawing the cars

            // Find the dimensions of the cars,and scale it if necessary
            pt1.x = r->x*scale;
            pt2.x = (r->x+r->width)*scale;
            pt1.y = r->y*scale;
            pt2.y = (r->y+r->height)*scale;

            // Draw the rectangle in the input image
            cvRectangle( img, pt1, pt2, CV_RGB(230,20,232), 3, 8, 0 );

        }
         cars_count=cars->total;
         cvClearMemStorage( storage );
         cvReleaseMemStorage(&storage);

    }
    //cvShowImage( "result", img );   // Show the image in the window named "result"
 return img;
}

//****************************************** FRAME DIFFERENCING ALGO *************************************************

int frame_differencing(IplImage *image)
{
     img1=cvLoadImage("bg.bmp",1);   // background frame
     img2=image;
     int a=img1->height;
     int b=img1->width;

     int c=img2->height;
     int d=img2->width;

//printf("img 1 width=%d , img1 height=%d\n",b,a);
//printf("img 2 width=%d , img2 height=%d\n",d,c);


     //converting background image to grayscale
     img1_gray=cvCreateImage(cvSize(img2->width,img2->height),img2->depth,1);
     cvCvtColor(img1,img1_gray,CV_RGB2GRAY);
    // cvNamedWindow("bg_gray",1);
     //cvShowImage("bg_gray",img1_gray);

    //converting current image to grayscale
     img2_gray=cvCreateImage(cvSize(img2->width,img2->height),img2->depth,1);
     cvCvtColor(img2,img2_gray,CV_RGB2GRAY);

     //calculating absolute difference
     img_diff=cvCreateImage(cvSize(img2->width,img2->height),img2->depth,1);
     cvAbsDiff(img1_gray,img2_gray,img_diff);
   //  cvShowImage("difference",img_diff);

     edge_fg=cvCreateImage(cvSize(img2->width,img2->height),img2->depth,1);
     cvCanny(img_diff,edge_fg,70,255,3);

      cvDilate(edge_fg,edge_fg,NULL,1);
     // cvShowImage("edge_detetion",edge_fg);

      //******************** CALCULATING EDGES AFTER FRAME DIFFERENCING ******************************************


      img_diff2=edge_fg;

    //   cvNamedWindow("secondDifference",1);
      // cvShowImage("secondDifference",img_diff2);

       //************************ Counting white pixels *********************************

height    = img_diff2->height;
width     = img_diff2->width;
step      = img_diff2->widthStep;
channels  = img_diff2->nChannels;
data      = (uchar *)img_diff2->imageData;

total_pixel=height*width;
//printf("height=%d , width=%d, total_pixel=%d",height,width,total_pixel);
// Begin
WhiteCount = 0;
for(i=0;i<height;i++)
{
  for(j=0;j<width;j++)
  { // Go through each channel of the image (R,G, and B) to see if it's equal to 255
    bWhite = 0;
    for(k=0;k<channels;k++)
    {       // This checks if the pixel's kth channel is 255 - it can be faster.
             int value = 0;
            value=data[i*step+j*channels+k];
            if (value==255)
            {
                bWhite = 1;
               // printf("inside white value=%d",value);
            }
            else
            {
                    bWhite = 0;
                    break;
            }
    }
    if(bWhite == 1) WhiteCount++;
  }
}

//printf("Percentage: %f%%\n",100.0*WhiteCount/(height*width));
//printf("white Pixels=%d\n",WhiteCount);

//********************** calculating percentage of black pixels**************************************************

black_pixel=total_pixel-WhiteCount;
//printf("black pixel=%d\n",black_pixel);
Black_percentage=100.0*black_pixel/total_pixel;
//printf("black percentage=%f%%\n",Black_percentage);
//printf("black percentage=%f%\n",100.0*black_pixel/total_pixel);
//printf("*****************************************************************************\n");
//printf(" \n");
//printf("~~~~~~~~~~~~~~~~~CONGESTION CHECK~~~~~~~~~~~~~~~~~~\n");

if(Black_percentage>=80)  // 77
{
  //  printf("\n Normal Traffic\n");
    return 1;

}

if(Black_percentage<80)  //77
{
    //printf("\n Congestion on road \n");
    return 2;
}
/*if(Black_percentage>=89&&Black_percentage<98)
{
    printf("normal traffic\n");
    return 2;
}
if(Black_percentage>=84&&Black_percentage<89)
{
    printf("Congestion on road\n");
    return 3;
}
if(Black_percentage<84)
{
    printf(" extreme congestion\n");
    return 4;
}*/

}   // END OF FRAME DIFFERENCING



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONGESTION OF MISSED SIGNAL ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void Siganl_Missed(int road_value, int signalName)
{
    //printf("entering missed signal \n");
if(road_value==2)
            {
        //        printf("\n_____________________________________________\n");
                printf("  SIGNAL %d IS ON FOR 40 SECONDS\n",signalName);
                //printf("\n_____________________________________________\n");
                   increase_signal_time=signal_span_congestion;
                 signal_time_switch=seconds+increase_signal_time;
             //   printf("nxt tym span=%d\n",signal_time_switch);
                road_value=0;

                if(signalName==1)
                {
                    signal_1=true;
                    lap++;


                }
                else if(signalName==2)
                {
                    signal_2=true;
                    lap++;
                }
                else if(signalName==3)
                {
                    signal_3=true;
                    lap++;
                }
                else if (signalName==4)
                {
                    signal_4=true;
                    lap++;
                }

            }
            else
            {
          //       printf("\n_____________________________________\n");
                printf("  SIGNAL %d IS ON FOR 20 SECONDS\n",signalName);
              //  printf("\n_____________________________________\n");
                increase_signal_time=signal_span_normal;
                 signal_time_switch=seconds+increase_signal_time;
               // printf("nxt tym span=%d\n",signal_time_switch);
                road_value=0;

          if(signalName==1)
                {
                    signal_1=true;
                    lap++;

                }
                else if(signalName==2)
                {
                    signal_2=true;
                    lap++;
                }
                else if(signalName==3)
                {
                    signal_3=true;
                    lap++;
                }
                else if (signalName==4)
                {
                    signal_4=true;
                    lap++;
                }


            }

if(signal_time_switch>=60)
{
int remaining=60-seconds;
 //new_time=signal_time_switch-remaining;

new_time=increase_signal_time-remaining;
signal_time_switch=62;
time_left=true;
remaining=0;

}

/*if(signal_time_switch>=60)
        {
          int remaining=60-seconds;
          x=increase_signal_time-remaining;
          printf("remianing time to b added=%d\n",remaining);
            printf("system sleeping for time=%d\n",remaining);
            y=(remaining*1000);

           sys_wait=true;

        } */


} // end of signal Missed function





int main()
{
          // Printf("\n -----------------------------------------------------------------------------\n");
          printf(" \n ");
          printf(" \n ");
         printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

         printf("\n                         TRAFFIC CONGESTION CONTROL SYSTEM            \n");
         printf(" \n ");
          printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");


   startTime=clock();

  // Gets the input video stream from camera
  CvCapture* capture = cvCaptureFromCAM( 0 );
  CvCapture* capture2 = cvCaptureFromCAM( 1 );
  CvCapture* capture3 = cvCaptureFromCAM( 2 );
  CvCapture* capture4 = cvCaptureFromCAM( 4 );

//setting capture properties of all cameras
cvSetCaptureProperty(capture,CV_CAP_PROP_FRAME_WIDTH,cam_width);
cvSetCaptureProperty(capture,CV_CAP_PROP_FRAME_HEIGHT,cam_height);
cvSetCaptureProperty(capture,CV_CAP_PROP_FPS,25);

cvSetCaptureProperty(capture2,CV_CAP_PROP_FRAME_WIDTH,cam_width);
cvSetCaptureProperty(capture2,CV_CAP_PROP_FRAME_HEIGHT,cam_height);
cvSetCaptureProperty(capture2,CV_CAP_PROP_FPS,25);

cvSetCaptureProperty(capture3,CV_CAP_PROP_FRAME_WIDTH,cam_width);
cvSetCaptureProperty(capture3,CV_CAP_PROP_FRAME_HEIGHT,cam_height);
cvSetCaptureProperty(capture3,CV_CAP_PROP_FPS,25);

cvSetCaptureProperty(capture4,CV_CAP_PROP_FRAME_WIDTH,cam_width);
cvSetCaptureProperty(capture4,CV_CAP_PROP_FRAME_HEIGHT,cam_height);
cvSetCaptureProperty(capture4,CV_CAP_PROP_FPS,25);

//acquiring frames
IplImage* frame_count = cvQueryFrame( capture );
IplImage* frame_count2 = cvQueryFrame( capture2 );
IplImage* frame_count3 = cvQueryFrame( capture3 );
IplImage* frame_count4 = cvQueryFrame( capture4 );


while(1)
{
       //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STARTING TIMER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     count_time=clock();
    milliseconds=count_time-startTime;
    seconds=(milliseconds/(CLOCKS_PER_SEC))-(minutes*60);
    minutes=(milliseconds/(CLOCKS_PER_SEC))/60;
   // printf("Secondx=%d\n",seconds);

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CAPTURING FRAME ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    frame1 = cvQueryFrame( capture );
    frame2 = cvQueryFrame( capture2 );
    frame3 = cvQueryFrame( capture3 );
    frame4 = cvQueryFrame( capture4 );
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Detecting road traffic ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

   result1=car_detection_counting(frame1);
   cars_count_a=cars_count;
  // cvShowImage("tryyy",result1);
 //  printf("car found_1= %d\n",cars_count_a);
   cvShowImage("ROAD 1",result1);
   result2=car_detection_counting(frame2);
   cars_count_b=cars_count;
   //printf("car found_2= %d\n",cars_count_b);
   cvShowImage("ROAD 2",result2);
   result3=car_detection_counting(frame3);
   cars_count_c=cars_count;
   //printf("car found_3= %d\n",cars_count_c);
   cvShowImage("ROAD 3",result3);
   result4=car_detection_counting(frame4);
   cars_count_d=cars_count;
   //printf("car found_4= %d\n",cars_count_d);
  cvShowImage("ROAD 4",result4);
  //Sleep(1000);

if(seconds==0)
{
    if(time_left==true)
    {
        signal_time_switch=seconds+new_time;
        if(signal_time_switch>=60)
        {
            int remaining2=60-seconds;
           //new_time=signal_time_switch-remaining2;

           new_time=increase_signal_time-remaining2;
           signal_time_switch=62;
        }
        else
        time_left=false;
    }

}
/*if(sys_wait==true)
{
      printf("system waitx true******************************\n");
    printf("sys waiting for %d\n",y);
    Sleep(y);

    // printf("now secondx=%d\n",seconds);
    // Sleep(4000);
     count_time=clock();
      milliseconds=count_time-startTime;
    seconds=(milliseconds/(CLOCKS_PER_SEC))-(minutes*60);
    minutes=(milliseconds/(CLOCKS_PER_SEC))/60;
    // printf("now secondx=%d\n",seconds);
     count_time=clock();
      milliseconds=count_time-startTime;
    seconds=(milliseconds/(CLOCKS_PER_SEC))-(minutes*60);
    minutes=(milliseconds/(CLOCKS_PER_SEC))/60;
    //printf("now secondx=%d\n",seconds);
          signal_time_switch=seconds+x;
        printf("new signal switch time=%d\n",signal_time_switch);
        sys_wait=false;

}*/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TIME FOR SIGNAL CHANGE ACHIEVED ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if(seconds==signal_time_switch)
    {

printf("\n \t \t \t \t \t \t \t \t Seconds=%d\n",seconds);
//printf(" \n ");
//printf("\n       TRAFFIC CONGESTION CONTROL SYSTEM     \n");
increase_signal_time=0;

    //lap completetion check
    if(lap>4)
    {
      //  printf("LAP 4 achieved\n");
      signal_1=false;
      signal_2=false;
      signal_3=false;
      signal_4=false;
      lap=1;
      w=0;
      system("cls");

      printf(" \n ");
          printf(" \n ");
         printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

         printf("\n                         TRAFFIC CONGESTION CONTROL SYSTEM            \n");
         printf(" \n ");
          printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");


          printf("\n \t \t \t \t \t \t \t \t Seconds=%d\n",seconds);
           printf(" \n ");
/*int v=0;
for(v;v<4;v++)
{
    printf("value of array = %d \n",arr[v]);
}*/

    }

    if(first_pair==false)
    {

        //printf("\n ~~~~~~~~~~entering first pair ~~~~~~~~~~~~~\n");
        //if(signal_turn1==true)     // any signal missed
        //{
          //  printf("missed signal found\n");
            if(signal_1==true)     // check congestion on missed signal
            {
          //     printf("calling frame differnce from pair 1 missed signal\n");
            road_value1=frame_differencing(result3);
            signal_name=3;
            Siganl_Missed(road_value1,signal_name);
            signal_turn1=false;
            signal_code=3;
            arr[w]=signal_code;
  //          printf("added value %d to arr \n",signal_code);
            w++;
            }
            else if(signal_3==true)
                 {
            //         printf("calling f_D from missed signal else condition\n");
            road_value1=frame_differencing(result1);
            signal_name=1;
            Siganl_Missed(road_value1,signal_name);
            signal_turn1=false;
            signal_code=1;
             arr[w]=signal_code;
    //        printf("added value %d to arr \n",signal_code);
             w++;
            }

      //  }   // END OF SIGNAL MISSED CHECK.....

             // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~if no signal missed yet ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        else
        {
                a=cars_count_a;
                c=cars_count_c;
                //printf("cars in 1st signal =%d\n",a);
                //printf("cars on 3rd signal=%d\n",c);

               if(a>c)
               {
                   greater_1=result1;
                   smaller_1=result3;
                   signal_code=1;
               }
               else
               {
                   greater_1=result3;
                   smaller_1=result1;
                   signal_code=3;
               }

               //printf("calling frame differnce if no signal missed 1st check\n");
                determine_conegstion_pair1=frame_differencing(greater_1);
                //printf("determine congestion=%d\n",determine_conegstion_pair1);
                 if(determine_conegstion_pair1==2)
                 {
              //          printf("congestion retuned by signal = %d\n",signal_code);
              //  printf("\n_____________________________________\n");
                printf("  SIGNAL %d IS ON FOR 40 SECONDS\n",signal_code);

              //  printf("\n_____________________________________\n");
                increase_signal_time=signal_span_congestion;
                 signal_time_switch=seconds+increase_signal_time;
                //printf("nxt tym span=%d\n",signal_time_switch);
                determine_conegstion_pair1=0;
                if(signal_code==1)
                {
                    signal_1=true;
                     arr[w]=signal_code;
      //      printf("added value %d to arr \n",signal_code);
            w++;
                //    printf ("signal 1 is on\n");
                               // signal has been missed...
                    if(lap!=signal_code)
                    {
                        signal_turn1=true;
                  //     printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }
                    lap++;
                }
                else if(signal_code==3)
                {
                    signal_3=true;
                     arr[w]=signal_code;
        //    printf("added value %d to arr \n",signal_code);
            w++;
                    //printf("signal 3 is on \n");
                    if(lap!=signal_code)
                    {
                        signal_turn1=true;
                        //printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }

                 }
                 // if congestion not found on road detected as having greater number of cars.....
                 else
                 {
                    determine_conegstion_pair1=0;
                    if(signal_code==1)
                    {
                        signal_code=3;
                    }
                    else if (signal_code==3)
                    {
                      signal_code=1;
                    }

                //printf("calling f_D from  no missed signal else condition- smaller value C >a\n");
                     determine_conegstion_pair1=frame_differencing(smaller_1);
                      if(determine_conegstion_pair1==2)
                 {
                      //  printf("else condition congestion retuned by signal = %d\n",signal_code);
               // printf("\n_____________________________________\n");
                printf("  SIGNAL %d IS ON FOR 40 SECONDS\n",signal_code);
               // printf("\n_____________________________________\n");
                increase_signal_time=signal_span_congestion;
                 signal_time_switch=seconds+increase_signal_time;
                //printf("nxt tym span=%d\n",signal_time_switch);
                determine_conegstion_pair1=0;
                if(signal_code==1)
                {
                    signal_1=true;
                     arr[w]=signal_code;
          //  printf("added value %d to arr \n",signal_code);
            w++;
                        //printf("signal 1 on in smaller \n");
                    if(lap!=signal_code)
                    {
                        signal_turn1=true;
                       // printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }
                else if(signal_code==3)
                {
                    signal_3=true;
                     arr[w]=signal_code;
            //printf("added value %d to arr \n",signal_code);
            w++;
                    //printf("signal 3 on in smaller \n");
                    if(lap!=signal_code)
                    {
                        signal_turn1=true;
                        //printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }

                 }

                 // if no congestion found on any road....

                 else
                 {
                      signal_code=arr[w];
                     //printf("i entrd in normal flow cndition \n");
                 //             printf("\n_____________________________________\n");
                              printf("  SIGNAL %d IS ON FOR 20 SECONDS\n",signal_code);
                            //  printf("\n_____________________________________\n");

                              increase_signal_time=signal_span_normal;
                               signal_time_switch=seconds+increase_signal_time;
                               //printf("nxt tym span=%d\n",signal_time_switch);
                               determine_conegstion_pair1=0;
                              // lap++;
                               /*if(lap==1)
                               {
                                   signal_1=true;
                      //             printf("signal 1 accrding to turn \n");
                                   frame_differencing(result1);
                                   lap++;
                               }
                               else if(lap==3)
                               {
                                   signal_3=true;
                        //           printf ("signal 3 accrding to turn \n");
                                   frame_differencing(result3);
                                   lap++;
                               }
                               else
                                printf("System Error\n"); */

                                signal_code=arr[w];
                                if (signal_code==1)
                                {
                                    signal_1=true;
                                    frame_differencing(result1);
                                   lap++;
                                    arr[w]=signal_code;
            //printf("added value %d to arr \n",signal_code);
            w++;
                                }
                                else if (signal_code==3)
                                {
                                    signal_3=true;
                                    frame_differencing(result3);
                                   lap++;
                                    arr[w]=signal_code;
            //printf("added value %d to arr \n",signal_code);
            w++;
                                }
                                else
                                    printf("signal invalid \n");

                 }

                 }

     // time check.....
if(signal_time_switch>=60)
{
int remaining=60-seconds;
 //new_time=signal_time_switch-remaining;
 new_time=increase_signal_time-remaining;
signal_time_switch=62;
time_left=true;
remaining=0;

}


  /*    if(signal_time_switch>=60)
        {
          int remaining=60-seconds;
          x=increase_signal_time-remaining;
          printf("remianing time to b added=%d\n",remaining);
            printf("system sleeping for time=%d\n",remaining);
            y=(remaining*1000);

           sys_wait=true;

        }*/

                   } // end of no signal missed code (else condition)

           //**************** Resultx displaying *********************************

if (signal_1==true && signal_3==false)
{
    printf("\n");
    printf("Signal 2: OFF\n");
    printf("Signal 3: OFF\n");
    printf("Signal 4: OFF\n");
    printf("___________________________________________________ \n ");
}
else if (signal_3==true && signal_1==false)
{
    printf("\n");
 printf("Signal 1: OFF\n");
    printf("Signal 2: OFF\n");
    printf("Signal 4: OFF\n");
    printf("___________________________________________________ \n ");
}
else if (signal_1==true && signal_3==true)
{
        if(signal_code==1)
        {
          //   printf(" \n aaaaaaannnnnn 1  \n");
            printf("\n");
             printf("Signal 2: OFF\n");
     printf("Signal 3: OFF\n");
      printf("Signal 4: OFF\n");
   printf("___________________________________________________ \n ");
        }
        else if (signal_code==3)
        {
            //printf(" \n aaaaaaannnnnn 2  \n");
            printf("\n");
             printf("Signal 1: OFF\n");
     printf("Signal 2: OFF\n");
      printf("Signal 4: OFF\n");
   printf("___________________________________________________ \n ");
        }


}




first_pair=true;
second_pair=false;
greater_1=NULL;
smaller_1=NULL;

//Sleep(1500);
//printf("\n Value of LAp= %d\n",lap);

    } // end of first pair signal check.....

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ CONGESTION CHECK FOR SECOND PAIR OF ROADS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

else if(second_pair==false)
{
    //printf ("value of w= %d\n",w);
    //printf ("value at w =%d\n",arr[w]);
//printf("enetring 2nd pair... \n");
//if(signal_turn2==true)
//{
//printf("missed signal in 2nd pair found\n");
 if(signal_2==true)
            {
      //          printf("entrd signal 2 is true \n");
            road_value2=frame_differencing(result4);
            signal_name=4;
            Siganl_Missed(road_value2,signal_name);
            signal_turn2=false;
            signal_code2=4;
              arr[w]=signal_code2;
        //    printf("added value %d to arr \n",signal_code2);
            w++;
            }
            else if(signal_4==true)
                 {
            //         printf("entrd signal 4 is true \n");
            road_value2=frame_differencing(result2);
            signal_name=2;
            Siganl_Missed(road_value2,signal_name);
            signal_turn2=false;
            signal_code2=2;
             arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;

            }
//}//end of missed signal

//~~~~~~~~~~~~~~~~~~~~~~~~~~~ IF SIGNAL  NOT MISSED ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


 else
        {
            //printf("entrd in else condition \n");
                b=cars_count_a;
                d=cars_count_c;

               if(b>d)
               {
                   greater_2=result2;
                   smaller_2=result4;
                   signal_code2=2;
                   //printf("signal code= %d",signal_code2);
               }
               else
               {
                   greater_2=result4;
                   smaller_2=result2;
                   signal_code2=4;
                   //printf("signal code= %d",signal_code2);
               }

                determine_conegstion_pair2=frame_differencing(greater_2);
                 if(determine_conegstion_pair2==2)
                 {

                //printf("\n_____________________________________\n");
                printf("  SIGNAL %d IS ON FOR 40 SECONDS\n",signal_code2);
                //printf("\n_____________________________________\n");
                increase_signal_time=signal_span_congestion;
                 signal_time_switch=seconds+increase_signal_time;
                //printf("nxt tym span=%d\n",signal_time_switch);
                determine_conegstion_pair2=0;

                if(signal_code2==2)
                {
              //      printf("signal 2 on karng;.. \n");
                    signal_2=true;
                     arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;
                     //   printf("signal 2 is on \n");
                               // signal has been missed...
                    if(lap!=signal_code2)
                    {
                        signal_turn2=true;
                       // printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }
                    lap++;
                }
                else if(signal_code2==4)
                {
              //      printf("signal 4 on karing... \n");
                    signal_4=true;
                    arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;

                    if(lap!=signal_code2)
                    {
                        signal_turn2=true;
                        //printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }
                else
                    printf("\n ERROR...");

                 }
                 // if congestion not found on road detected as having greater number of cars.....
                 else
                 {
                    determine_conegstion_pair2=0;
                    if(signal_code2==2)
                    {
                        signal_code2=4;
                        //printf("code change 4\n");
                    }
                    else if(signal_code2==4)
                    {
                      signal_code2=2;
                      //printf("code change 2\n");
                    }
                   // else
                     //   printf("\nSYSTEM ERROR\n");

                     determine_conegstion_pair2=frame_differencing(smaller_2);
                      if(determine_conegstion_pair2==2)
                 {

                //printf("\n_____________________________________\n");
                printf("  SIGNAL %d IS ON FOR 40 SECONDS\n",signal_code2);
              //  printf("\n_____________________________________\n");
                increase_signal_time=signal_span_congestion;
                 signal_time_switch=seconds+increase_signal_time;
                //printf("nxt tym span=%d\n",signal_time_switch);
                determine_conegstion_pair2=0;
                if(signal_code2==2)
                {
              //      printf ("signal 2 on karing on smaller side \n");
                    signal_2=true;
                    arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;
                    //printf("signal 2 is turnd on smaller\n");

                    if(lap!=signal_code2)
                    {
                        signal_turn2=true;
                    //printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }
                else if(signal_code2==4)
                {
              //      printf ("signal 2 on karing on smaller side \n");
                    signal_4=true;
                    arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;
                    //printf("signal 4 is on atttt \n");
                    if(lap!=signal_code)
                    {
                        signal_turn2=true;
                      //  printf("\n SIGNAL MISSSSSSSSSSSSSEEEEDDDDD... \n");
                    }

                    lap++;
                }

                 }

                 // if no congestion found on any road....

                 else
                 {
                     signal_code2=arr[w];
                  //            printf("\n_____________________________________\n");
                              printf("  SIGNAL %d IS ON FOR 20 SECONDS\n",signal_code2);
                           //   printf("\n_____________________________________\n");
                              increase_signal_time=signal_span_normal;
                               signal_time_switch=seconds+increase_signal_time;
                               //printf("nxt tym span=%d\n",signal_time_switch);
                               determine_conegstion_pair1=0;
                               //lap++;
                /*               if(lap==2)
                               {
                        //           printf("2 is on accrdinh to lap number\n");
                                   signal_2=true;
                                   frame_differencing(result2);
                                   lap++;
                               }
                               else if(lap==4)
                               {
                          //         printf("4 is on accrdinh to lap number\n");
                                  signal_4=true;
                                  frame_differencing(result4);
                                  lap++;
                               }
                       */
                                // signal_code2=arr[w];
                                if (signal_code2==2)
                                {
                                  //  printf ("no congestion found so signal 2 accrdng to arr \n");
                                    signal_2=true;
                                    frame_differencing(result2);
                                   lap++;
                                    arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;
                                }
                                else if (signal_code2==4)
                                {
                                   // printf ("no congestion found so signal 4 accrdng to arr \n");
                                    signal_4=true;
                                    frame_differencing(result4);
                                   lap++;
                                    arr[w]=signal_code2;
            //printf("added value %d to arr \n",signal_code2);
            w++;
                                }
                                else
                                    printf("signal invalid \n");




                 }

                 }

     // time check.....
if(signal_time_switch>=60)
{
int remaining=60-seconds;
 //new_time=signal_time_switch-remaining;
new_time=increase_signal_time-remaining;
signal_time_switch=62;
time_left=true;
remaining=0;

}


      /*if(signal_time_switch>=60)
        {
          int remaining=60-seconds;
          x=increase_signal_time-remaining;
          printf("remianing time to b added=%d\n",remaining);
            printf("system sleeping for time=%d\n",remaining);
            y=(remaining*1000);

           sys_wait=true;

        }*/

                   } // end of no signal missed code (else condition)

           //**************** Resultx displaying *********************************

if (signal_2==true && signal_4==false)
{
    printf("\n");
    printf("Signal 1: OFF\n");
    printf("Signal 3: OFF\n");
    printf("Signal 4: OFF\n");
    printf("___________________________________________________ \n ");
}
else if (signal_4==true && signal_2==false)
{
    printf("\n");
 printf("Signal 1: OFF\n");
    printf("Signal 2: OFF\n");
    printf("Signal 3: OFF\n");
    printf("___________________________________________________ \n ");
}
else if (signal_4==true && signal_2==true)
{
        if(signal_code2==2)
        {
            // printf(" \n uuuuhhhhuuuu  1   \n");
            printf("\n");
             printf("Signal 1: OFF\n");
     printf("Signal 3: OFF\n");
      printf("Signal 4: OFF\n");
   printf("___________________________________________________ \n ");
        }
        else if (signal_code2==4)
        {
            //printf(" \n uuuuhhhhuuuu  2   \n");
            printf("\n");
             printf("Signal 1: OFF\n");
     printf("Signal 2: OFF\n");
      printf("Signal 3: OFF\n");
   printf("___________________________________________________ \n ");
        }


}

second_pair=true;
first_pair=false;
determine_conegstion_pair2=0;
greater_2=0;
smaller_2=0;

//printf("\n value of LAP = %d\n",lap);



} // end of 2nd pair



//Sleep(9000);


    }// end of if certain time acheived


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ STOPING PROGRAM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     if( (cvWaitKey(10) & 255) == 27 )
      break;
}// end of main while loop

   cvReleaseCapture( &capture );
    cvRelease(&img1);
     cvRelease(&img2);
     cvRelease(&img1_gray);
     cvRelease(&img2_gray);
     cvRelease(&img_diff);
    cvRelease(&img_diff2);
    cvRelease(&edge_fg);

    cvRelease(&result1);
    cvRelease(&result2);
    cvRelease(&result3);
    cvRelease(&result4);


    // cvDestroyWindow("foreground");
     //cvDestroyWindow("difference");

  //  cvDestroyWindow("bg_gray");
   // cvDestroyWindow("secondDifference");

   //cvDestroyWindow("Road_1");
   //cvDestroyWindow("check_frame");
   //cvDestroyWindow("result");
   void cvDestroyAllWindows(void);
   getchar();
    return 0;
}
